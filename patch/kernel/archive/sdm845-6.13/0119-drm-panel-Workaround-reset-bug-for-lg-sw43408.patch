From fe90cedf4793be5103cc37f7ff930bb8d08d1d5b Mon Sep 17 00:00:00 2001
From: Victoria Brekenfeld <github@drakulix.de>
Date: Sun, 28 Apr 2024 23:04:41 +0200
Subject: [PATCH 119/142] drm: panel: Workaround reset-bug for lg-sw43408

---
 .../boot/dts/qcom/sdm845-google-blueline.dts  | 10 ++++
 drivers/gpu/drm/panel/panel-lg-sw43408.c      | 49 ++++++++++++++++---
 2 files changed, 52 insertions(+), 7 deletions(-)

diff --git a/arch/arm64/boot/dts/qcom/sdm845-google-blueline.dts b/arch/arm64/boot/dts/qcom/sdm845-google-blueline.dts
index 31ad233d43..d1a1336314 100644
--- a/arch/arm64/boot/dts/qcom/sdm845-google-blueline.dts
+++ b/arch/arm64/boot/dts/qcom/sdm845-google-blueline.dts
@@ -226,6 +226,11 @@ vreg_l14a_1p88: ldo14 {
 			regulator-max-microvolt = <1800000>;
 			regulator-initial-mode = <RPMH_REGULATOR_MODE_HPM>;
 			regulator-boot-on;
+			/*
+			 * We can't properly bring the panel back if it gets turned off
+			 * so keep it's regulators always on for now.
+			 */
+			regulator-always-on;
 		};
 
 		vreg_l17a_1p3: ldo17 {
@@ -284,6 +289,11 @@ vreg_l28a_3p0: ldo28 {
 			regulator-max-microvolt = <3008000>;
 			regulator-initial-mode = <RPMH_REGULATOR_MODE_HPM>;
 			regulator-boot-on;
+			/*
+			 * We can't properly bring the panel back if it gets turned off
+			 * so keep it's regulators always on for now.
+			 */
+			regulator-always-on;
 		};
 	};
 
diff --git a/drivers/gpu/drm/panel/panel-lg-sw43408.c b/drivers/gpu/drm/panel/panel-lg-sw43408.c
index 685cdd1053..432fd391bd 100644
--- a/drivers/gpu/drm/panel/panel-lg-sw43408.c
+++ b/drivers/gpu/drm/panel/panel-lg-sw43408.c
@@ -22,6 +22,21 @@
 
 #define NUM_SUPPLIES 2
 
+static const char *const regulator_names[] = {
+	"vddi",
+	"vpnl",
+};
+
+static unsigned long const regulator_enable_loads[] = {
+	62000,
+	857000,
+};
+
+static unsigned long const regulator_disable_loads[] = {
+	80,
+	0,
+};
+
 struct sw43408_panel {
 	struct drm_panel base;
 	struct mipi_dsi_device *link;
@@ -54,15 +69,28 @@ static int sw43408_disable(struct drm_panel *panel)
 
 static int sw43408_unprepare(struct drm_panel *panel)
 {
-	struct sw43408_panel *sw43408 = to_panel_info(panel);
-	struct mipi_dsi_multi_context ctx = { .dsi = sw43408->link };
-	int ret;
+	struct sw43408_panel *ctx = to_panel_info(panel);
+	int ret, i;
+
+	// gpiod_set_value(ctx->reset_gpio, 1);
 
-	gpiod_set_value(sw43408->reset_gpio, 1);
+	// ret = regulator_bulk_disable(ARRAY_SIZE(ctx->supplies), ctx->supplies);
 
-	ret = regulator_bulk_disable(ARRAY_SIZE(sw43408->supplies), sw43408->supplies);
+	// msleep(100);
 
-	return ret ? : ctx.accum_err;
+	for (i = 0; i < ARRAY_SIZE(ctx->supplies); i++) {
+		ret = regulator_set_load(ctx->supplies[i].consumer,
+					 regulator_disable_loads[i]);
+		if (ret) {
+			dev_err(panel->dev,
+				      "regulator_set_load failed %d\n", ret);
+			return ret;
+		}
+	}
+
+	// FIXME: we're relying on this not actually disabling the regulators since
+	// they're marked always-on in DT.
+	return regulator_bulk_disable(ARRAY_SIZE(ctx->supplies), ctx->supplies);
 }
 
 static int sw43408_program(struct drm_panel *panel)
@@ -130,8 +158,15 @@ static int sw43408_program(struct drm_panel *panel)
 static int sw43408_prepare(struct drm_panel *panel)
 {
 	struct sw43408_panel *ctx = to_panel_info(panel);
-	int ret;
+	int ret, i;
 
+	for (i = 0; i < ARRAY_SIZE(ctx->supplies); i++) {
+		ret = regulator_set_load(ctx->supplies[i].consumer,
+					 regulator_enable_loads[i]);
+		if (ret)
+			return ret;
+	}
+	
 	ret = regulator_bulk_enable(ARRAY_SIZE(ctx->supplies), ctx->supplies);
 	if (ret < 0)
 		return ret;
-- 
2.49.0

