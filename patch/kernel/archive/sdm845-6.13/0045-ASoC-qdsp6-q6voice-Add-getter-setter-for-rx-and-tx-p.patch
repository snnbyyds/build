From 6f3925a376e7fcba2080500f1fe4a7254f179398 Mon Sep 17 00:00:00 2001
From: Vincent Knecht <vincent.knecht@mailoo.org>
Date: Tue, 28 Sep 2021 20:03:13 +0200
Subject: [PATCH 045/143] ASoC: qdsp6: q6voice: Add getter/setter for rx and tx
 ports

Add function to get and set RX/TX ports and use those
to un-hardcode the ports set in q6cvp_session_create() call.

Signed-off-by: Vincent Knecht <vincent.knecht@mailoo.org>
---
 sound/soc/qcom/qdsp6/q6voice.c | 45 ++++++++++++++++++++++++----------
 sound/soc/qcom/qdsp6/q6voice.h |  8 ++++++
 2 files changed, 40 insertions(+), 13 deletions(-)

diff --git a/sound/soc/qcom/qdsp6/q6voice.c b/sound/soc/qcom/qdsp6/q6voice.c
index 2a6910d965..4666a068ac 100644
--- a/sound/soc/qcom/qdsp6/q6voice.c
+++ b/sound/soc/qcom/qdsp6/q6voice.c
@@ -7,21 +7,12 @@
 #include <linux/mutex.h>
 #include <linux/slab.h>
 #include <linux/spinlock.h>
+#include "q6afe.h"
 #include "q6cvp.h"
 #include "q6cvs.h"
 #include "q6mvm.h"
 #include "q6voice-common.h"
 
-/* FIXME: Remove */
-#define AFE_PORT_ID_PRIMARY_MI2S_RX         0x1000
-#define AFE_PORT_ID_PRIMARY_MI2S_TX         0x1001
-#define AFE_PORT_ID_SECONDARY_MI2S_RX       0x1002
-#define AFE_PORT_ID_SECONDARY_MI2S_TX       0x1003
-#define AFE_PORT_ID_TERTIARY_MI2S_RX        0x1004
-#define AFE_PORT_ID_TERTIARY_MI2S_TX        0x1005
-#define AFE_PORT_ID_QUATERNARY_MI2S_RX      0x1006
-#define AFE_PORT_ID_QUATERNARY_MI2S_TX      0x1007
-
 struct q6voice_path_runtime {
 	struct q6voice_session *sessions[Q6VOICE_SERVICE_COUNT];
 	unsigned int started;
@@ -39,6 +30,8 @@ struct q6voice_path {
 struct q6voice {
 	struct device *dev;
 	struct q6voice_path paths[Q6VOICE_PATH_COUNT];
+	u16 port_rx;
+	u16 port_tx;
 };
 
 static int q6voice_path_start(struct q6voice_path *p)
@@ -59,9 +52,9 @@ static int q6voice_path_start(struct q6voice_path *p)
 
 	cvp = p->runtime->sessions[Q6VOICE_SERVICE_CVP];
 	if (!cvp) {
-		/* FIXME: Stop hardcoding */
-		cvp = q6cvp_session_create(p->type, AFE_PORT_ID_TERTIARY_MI2S_TX,
-					   AFE_PORT_ID_PRIMARY_MI2S_RX);
+		cvp = q6cvp_session_create(p->type,
+					   q6afe_get_port_id(p->v->port_tx),
+					   q6afe_get_port_id(p->v->port_rx));
 		if (IS_ERR(cvp))
 			return PTR_ERR(cvp);
 		p->runtime->sessions[Q6VOICE_SERVICE_CVP] = cvp;
@@ -244,6 +237,32 @@ struct q6voice *q6voice_create(struct device *dev)
 }
 EXPORT_SYMBOL_GPL(q6voice_create);
 
+unsigned int q6voice_get_port(struct q6voice *v, enum q6voice_port_type type)
+{
+	switch (type) {
+	case Q6VOICE_PORT_RX:
+		return v->port_rx;
+	case Q6VOICE_PORT_TX:
+		return v->port_tx;
+	}
+
+	return -EINVAL;
+}
+EXPORT_SYMBOL_GPL(q6voice_get_port);
+
+void q6voice_set_port(struct q6voice *v, enum q6voice_port_type type, int index)
+{
+	switch (type) {
+	case Q6VOICE_PORT_RX:
+		v->port_rx = index;
+		break;
+	case Q6VOICE_PORT_TX:
+		v->port_tx = index;
+		break;
+	}
+}
+EXPORT_SYMBOL_GPL(q6voice_set_port);
+
 MODULE_AUTHOR("Stephan Gerhold <stephan@gerhold.net>");
 MODULE_DESCRIPTION("Q6Voice driver");
 MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/qcom/qdsp6/q6voice.h b/sound/soc/qcom/qdsp6/q6voice.h
index b760b85ad3..6ee6685f56 100644
--- a/sound/soc/qcom/qdsp6/q6voice.h
+++ b/sound/soc/qcom/qdsp6/q6voice.h
@@ -14,10 +14,18 @@ enum q6voice_path_type {
 	Q6VOICE_PATH_COUNT
 };
 
+enum q6voice_port_type {
+	Q6VOICE_PORT_RX = 0,
+	Q6VOICE_PORT_TX,
+};
+
 struct q6voice;
 
 struct q6voice *q6voice_create(struct device *dev);
 int q6voice_start(struct q6voice *v, enum q6voice_path_type path, bool capture);
 int q6voice_stop(struct q6voice *v, enum q6voice_path_type path, bool capture);
 
+unsigned int q6voice_get_port(struct q6voice *v, enum q6voice_port_type port);
+void q6voice_set_port(struct q6voice *v, enum q6voice_port_type port, int index);
+
 #endif /*_Q6_VOICE_H */
-- 
2.49.0

